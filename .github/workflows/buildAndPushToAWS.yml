name: Create image and deploy to AWS

on:
  push:
    branches:
      - 'main'

jobs:
  deploy_docker_image:
    name: Build and Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      # Build Docker Image
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: 15

#      - name: Build Docker Image with Gradle
#        run: ./gradlew bootBuildImage

      # Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: car-pocketbook-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo $ECR_REGISTRY
          echo $ECR_REPOSITORY
          echo $IMAGE_TAG
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#docker.pkg.github.com/mrak2017/car-maintenance-pocketbook/monobackend:latest
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-def.json
#          container-name: sample-app
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: sample-app-service
#          cluster: default
#          wait-for-service-stability: true